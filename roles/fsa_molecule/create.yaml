###
### THIS IS A DRIVER PLAY & ROLE FOR AUTOMATED CODE TESTS WITH MOLECULE
### NOT SOMETHING TO RUN MANUALLY, AND IGNORED BY FSA AUTO-DETECTION
###
---
# play 1, we compute some facts and create and inventory
- hosts: localhost
  connection: local
  tasks:
    # compute a unique test id from the role & scenario name
    - shell: echo {{ molecule_file }} | rev | cut -d '/' -f 2,3 | rev | tr '/' '-' | md5sum | awk '{print $1}' | cut -c1-8
      register: scenario
    - set_fact:
        # underscores cause ansible needs it
        testid: "{{ scenario.stdout }}_fsa_molecule"

    # make a clean slate for converge.yaml
    - file:
        path: /tmp/{{ scenario.stdout }}
        state: absent

    # add the target instances to create
    # map molecule.yml's platforms onto the role vars
    - add_host:
        hostname: "{{ item.name }}"
        groups: fsa_molecule_guests_{{ testid }}
        # the name of the vm
        instancename: "{{ item.name }}-{{ testid }}"
        # the host it'll run on
        runon: "{{ item.host }}"
        # the existing disk file to use
        template: "{{ item.type }}"
        # the action to perform
        action: create
        # whether to install python3
        bootstrap: "{{ item.bootstrap | default(true) }}"
        # whether to run updates
        osupdate: "{{ item.updates | default(false) }}"
      loop: "{{ molecule_yml.platforms }}"

    # and the hosts to create them on
    - add_host:
        hostname: "{{ item.host }}"
        groups: fsa_molecule_hosts_{{ testid }}
      loop: "{{ molecule_yml.platforms }}"

# play 2, we run the role on the *guests*, even though they don't exist yet
# this is in order to have maximum parallelism
# the role actually delegates everything manually to {{ runon }}
- hosts: "{{ 'fsa_molecule_guests_' ~ hostvars.localhost.testid }}"
  gather_facts: false
  pre_tasks:
    # bring over the testid for convenience
    - set_fact:
        testid: hostvars.localhost.testid
    # setup the connection
    - include_role:
        name: fsa_connect
      vars:
        target: "{{ runon }}"
  # do the thing
  roles:
    - fsa_molecule

# play 4, we pour the results into what molecule wants to see
# most of this is copy-pasted from stock
- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    # make the group name easier to handle
    - set_fact:
        groupname: "{{ 'fsa_molecule_guests_' ~ hostvars.localhost.testid }}"
    # populate the config
    - set_fact:
        instance_conf_dict:
          instance: "{{ item.instancename }}"
          address: "{{ item.ipaddr.stdout }}"
          user: root
          port: "22"
          identity_file: ~/.ssh/id_rsa
      loop: "{{ hostvars|dictsort|selectattr('0', 'in', groupname) }}"
      register: instance_config_dict

    #### hand over to molecule

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump instance config
      copy:
        content: |
          # Molecule managed

          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"
        mode: 0600
